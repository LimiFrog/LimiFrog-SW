/*******************************************************************************
 * stm32_it.c
 * 
 * (c)2015 LimiFrog / CYMEYA
 * This program is licensed under the terms of the MIT License.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
 * Please refer to the License File LICENSE.txt located at the root of this
 * project for full licensing conditions, 
 * or visit https://opensource.org/licenses/MIT.
 ******************************************************************************/



#include "stm32_it.h"
#include "LBF_lowlev_API.h"


extern PCD_HandleTypeDef hpcd;




/******************************************************************************/
/*             External Interrupt Request Handlers                            */
/******************************************************************************/



/*******************************************************************************
* Function Name  : EXTI0_IRQHandler
* Description    : Handles EXT interrupts from Pin0 of ports GPIOA/B/C/D .
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/

// On LimiFrog-0.x, possible external interrupts expected here would be :
//  - IRQ from CONN_POS8_PIN (PA0)
// (different from former LBF-V2)
void EXTI0_IRQHandler(void)
{

}


/*******************************************************************************
* Function Name  : EXTI1_IRQHandler
* Description    : Handles EXT interrupts from Pin 1 of ports GPIOA/B/C/D .
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/

// On LimiFrog-0.x, possible external interrupts expected here would be :
//  - CONN_POS7_PIN  (PA1)

void EXTI1_IRQHandler(void)
{

}

/*******************************************************************************
* Function Name  : EXTI2_IRQHandler
* Description    : Handles EXT interrupts from Pin 2 of ports GPIOA/B/C/D .
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/

// On LimiFrog-0.x, possible external interrupts expected here would be :
//  - IRQ_ALS_PROX_PIN  (PB2)
//  - CONN_POS1_PIN  (PA2)
// Caution: if enabling multiple sources for same EXTIxx_IRQn,
//   need to discriminate sources in IRQ handler

void EXTI2_IRQHandler(void)
{

}

/*******************************************************************************
* Function Name  : EXTI3_IRQHandler
* Description    : Handles EXT interrupts from Pin 3 of ports GPIOA/B/C/D .
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)

// On LimiFrog-0.x, possible external interrupts expected here would be :
//  - CONN_POS4_PIN (PA3)

{

}

/*******************************************************************************
* Function Name  : EXTI4_IRQHandler
* Description    : Handles EXT interrupts from Pin 4 of ports GPIOA/B/C/D .
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)

// On LimiFrog-0.x, possible external interrupts expected here would be :
//  - CONN_POS3_PIN  (PA4)

{

}

/*******************************************************************************
* Function Name  : EXTI9_5_IRQHandler
* Description    : Handles EXT interrupts from Pins 5 to 9 of ports GPIOA/B/C/D 
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/

// On LimiFrog-0.x, possible external interrupts expected here would be :
//  - INT1_ACC_GYR_PIN, Interrupt from LSM6DS3 (PC6)
//  - CONN_POS1_PIN (PA6)
//  - Mechanical Switch #2 if configured by user as IT source, through PC8
//    (caution: this switch is not debounced)

void EXTI9_5_IRQHandler(void)
{

}

/*******************************************************************************
* Function Name  : EXTI15_10_IRQHandler
* Description    : Handles EXT interrupts from Pins 10 to 15 of ports GPIOA/B/C/D 
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/

// On LimiFrog-0.x, possible external interrupts expected here would be :
//  - IRQ_PRESS_PIN, Interrupt from LPS25H (Pressure), through pin PB12
//  - ONOFF_STAT_PIN, Debounced ON/OFF from PMIC (LTC3553), through pin PC13
//  - SWITCH1_PIN, from Switch #1 if configured by user as IT source, on PA15
//    (caution: this switch is not debounced)
//  - IRQ_MAG_PIN, Interrupt INT from LIS3MDL (Magneto), through pin PB15
// Caution: if enabling multiple sources for same EXTIxx_IRQn,
//           need to discriminate sources in IRQ handler

void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(ONOFF_STAT_PIN);
  // Checks if ONOFF_STAT_PIN is source of IT
  // if so: HAL clears the IT and calls HAL_GPIO_EXTI_Callback (see below)
}



/******************************************************************************/
/*             Cortex-M Processor Exceptions Handlers                         */
/******************************************************************************/



/*******************************************************************************
* Function Name  : RTC_WKUP_IRQHandler
* Description    : Actualise l'heure toute les secondes.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_WKUP_IRQHandler(void)
{

   
}

/*******************************************************************************
* Function Name  : NMI_Handler
* Description    : This function handles NMI exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
}

/*******************************************************************************
* Function Name  : HardFault_Handler
* Description    : This function handles Hard Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
    /* Go to infinite loop when Hard Fault exception occurs */
    while (1);
}

/*******************************************************************************
* Function Name  : MemManage_Handler
* Description    : This function handles Memory Manage exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
    /* Go to infinite loop when Memory Manage exception occurs */
    while (1);
}

/*******************************************************************************
* Function Name  : BusFault_Handler
* Description    : This function handles Bus Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
    /* Go to infinite loop when Bus Fault exception occurs */
    while (1);
}

/*******************************************************************************
* Function Name  : UsageFault_Handler
* Description    : This function handles Usage Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
    /* Go to infinite loop when Usage Fault exception occurs */
    while (1);
}

/*******************************************************************************
* Function Name  : SVC_Handler
* Description    : This function handles SVCall exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVC_Handler(void)
{
}

/*******************************************************************************
* Function Name  : DebugMon_Handler
* Description    : This function handles Debug Monitor exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMon_Handler(void)
{
}

/*******************************************************************************
* Function Name  : PendSV_Handler
* Description    : This function handles PendSVC exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSV_Handler(void)
{
}

/*******************************************************************************
* Function Name  : SysTick_Handler
* Description    : This function handles SysTick Handler.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_Handler(void)
{
  HAL_IncTick();
}

/******************************************************************************/
/*                 STM32 Peripherals Interrupt Handlers                       */
/******************************************************************************/


/**
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
}



/*******************************************************************************
* Function Name  : TIMx_IRQHandler
* Description    : These functions handle interrupt request from Timer x.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/

    // Note:   functions HAL_TIM_IRQHandler( &htim ) called below check if
     //  indicated htim is source of IRQ
     // If so, finds out due to what event and, accordingly, calls one of the following :
     // HAL_TIM_IC_CaptureCallback(htim) 

     // HAL_TIM_OC_DelayElapsedCallback(htim) and HAL_TIM_PWM_PulseFinishedCallback(htim) 
     // HAL_TIM_PeriodElapsedCallback(htim)
     // HAL_TIM_TriggerCallback(htim)
     // Also clears the IT flag


void TIM1_UP_TIM16_IRQHandler(void)  
{
      HAL_TIM_IRQHandler( &htim1 ); 
      HAL_TIM_IRQHandler( &htim16 ); 
}
// Caution: TIM1 update IT is combined with TIM16 (global) IT

void TIM2_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim2 ); 
}

void TIM3_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim3 ); 
}

void TIM4_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim4 ); 
}

void TIM5_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim5 ); 
}

void TIM6_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim6 ); 
}
// Caution: TIM6 (global) IT is combined with DAC underrrun IT

void TIM7_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim7 ); 
}

void TIM8_UP_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim8 ); 
}
// Timer 8 has dedicated "update" interrupt

void TIM1_BRK_TIM15_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim15 ); 
}
// Caution: TIM15 IT is combined with TIM1 break IT

// TIM16 IRQ handler is combined with TIM1, see above

void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
      HAL_TIM_IRQHandler( &htim17 ); 
}
 // Caution: TIM17 (global) IT is combined with TIM1 trigger IT 




/**===========================================================================*/
/**==     Callback functions called by above IRQ handlers                     */
/**==     associated to on-chip peripherals                                   */
/**===========================================================================*/


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  // Code to execute when Timer Fires whichever timer it is:
  // .... none

  // Code to execute depending on which timer fired
  if( htim->Instance == TIM1 ) {
     // Code to handle interrupt from Timer1 here
     }
  else if( htim->Instance == TIM2 ) {
     // Code to handle interrupt from Timer2 here
     }
  else if( htim->Instance == TIM3 ) {
     // Code to handle interrupt from Timer3 here
     }
  else if( htim->Instance == TIM4 ) {
     // Code to handle interrupt from Timer4 here
     LBF_Led_TOGGLE();
     }
  else if( htim->Instance == TIM5 ) {
     // Code to handle interrupt from Timer5 here
     }
  else if( htim->Instance == TIM6 ) {
     // Code to handle interrupt from Timer6 here
     }
  else if( htim->Instance == TIM7 ) {
     // Code to handle interrupt from Timer7 here
     }
  else if( htim->Instance == TIM8 ) {
     // Code to handle interrupt from Timer8 here
     }
  else if( htim->Instance == TIM15 ) {
     // Code to handle interrupt from Timer15 here
     }
  else if( htim->Instance == TIM16 ) {
     // Code to handle interrupt from Timer16 here
     }
  else if( htim->Instance == TIM17 ) {
     // Code to handle interrupt from Timer17 here
     }
}


/**===========================================================================*/
/**==     Callback functions called by above IRQ handlers associated to EXTI, */
/**==       (EXTI = External Interrupts through GPIO pins)                    */
/**===========================================================================*/


/**
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None 
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{

// Servicing Interrupt from PWR_ONSTAT (power off required)

  if (GPIO_Pin == ONOFF_STAT_PIN)
  {
        LBF_Led_OFF();        

#ifdef USE_OLED  // (defined in User_Configuration.h)
	// Do not send command if no OLED (else SPI hangs)

        OLED_Switch_OFF();
        LBF_Delay_ms(100); // Delay between cutting OLED VDDH (13V) and VDD (logic) 
                       // to preserve panel lifetile - as per DD160128FC-1A datasheet
	    //Caution: TimerTick involved, its IRQ priority must be high (urgent) enough
	    // in Interrupt Configuration files
#endif


        // wait as long as ONOFF is active (ie. until user has finished pushing button)
        while(HAL_GPIO_ReadPin(ONOFF_STAT_PORT, ONOFF_STAT_PIN) == GPIO_PIN_RESET);

        
	//Quickly blink LED 3 times
	LBF_Led_ON();
        LBF_Delay_ms(100);        
	LBF_Led_OFF();
        LBF_Delay_ms(200);      

	LBF_Led_ON();
        LBF_Delay_ms(100);        
	LBF_Led_OFF();
        LBF_Delay_ms(200);   

	LBF_Led_ON();
        LBF_Delay_ms(100);        
	LBF_Led_OFF();


        // Bye bye:  Power down VCC_NUM by resetting pin BUCK3V_ON
        GPIO_LOW(BUCK3V_ON_PORT, BUCK3V_ON_PIN);
        LBF_Delay_ms(3000);
        while(1);

  }



}



/***************************************************************END OF FILE****/
