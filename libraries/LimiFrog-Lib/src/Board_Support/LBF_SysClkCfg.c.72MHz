/*******************************************************************************
 * LBF_SysClkCfg
 * 
 * (c)2015 LimiFrog / CYMEYA
 * This program is licensed under the terms of the MIT License.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
 * Please refer to the License File LICENSE.txt located at the root of this
 * project for full licensing conditions, 
 * or visit https://opensource.org/licenses/MIT.
 ******************************************************************************/



#include "LBF_SysClkCfg.h"
#include "LBF_lowlev_API.h"

/* Privates prototypes -------------------------------------------------------*/


/* Functions -----------------------------------------------------------------*/


/*******************************************************************************/


/* ----------------------------------------------------------------------------
 *  Assumption: 8MHz external oscillator (HSE),  32KHz external Xtal (LSE)    *
 *  Want 80MHz core clock, 48 MHz USB clock, 1ms Timer Tick,
 *  40MHz periph clock APB1 and APB2
 *  Must set Flash Latency according to core clock (80MHz here)
 * ---------------------------------------------------------------------------*/


void LBF_SysClkCfg(void)
{
// Derived from Cube MX Code Generator 

  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit;  
	
// Enable HSE Oscillator and Activate PLL with HSE as source 
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE; 
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 36; 
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;  // unused for now
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;  // 8MMHz/M*N/Q=48MHz
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;  // 8MMHz/M*N/R=72MHz
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  { 
    // Error_Handler();
  }


 __PWR_CLK_ENABLE();


  // Set Voltage scale to Range 1 to allow operation up to 80MHz
  // (internal regulator will provide 1.2V typical) 
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  // Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 
  // This indicates regulator has reached required voltage level
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOSF) != RESET) {};  


  // USB clock source
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;  //Div.Q output, 48MHz
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);


  // Select PLL as system clock source 
  // and configure the HCLK, PCLK1 and PCLK2 clocks dividers

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;	// SYSCLK = 72MHz

  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1; // AHBCLK (HCLK) = 72MHz to Cortex

  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  // APB1 periph clock = 18MHz


  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;  // APB2 periph clock = 18MHz


  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) 
 	// Flash Latency proposed by CubeMX 
  {
    // Error_Handler(); 
  }


 
  // SysTick clock source - 
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/8000); 
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8);
    // sets SysTick to generate 1 tick every HclkFreq/8000*8 cycle of Hclk ie. every 1ms

   __SYSCFG_CLK_ENABLE();  
   // System Configuration Clock
   // The system configuration controller is mainly used to remap the memory accessible in the
   // code area, and manage the external interrupt line connection to the GPIOs.


  // NOTE: RTC configuration is done separately, refer to LBF_LSE_RTC_Cfg.c


}



/***************************************************************END OF FILE****/
