/*******************************************************************************
 * LBF_ADC_lowlevAPI.c
 * 
 * (c)2015 LimiFrog / CYMEYA
 * This program is licensed under the terms of the MIT License.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
 * Please refer to the License File LICENSE.txt located at the root of this
 * project for full licensing conditions, 
 * or visit https://opensource.org/licenses/MIT.
 ******************************************************************************/


#include "LBF_lowlev_API.h"

ADC_HandleTypeDef    hAdc;


/*******************************************************************************
* Function Name  : LBF_ADC_Init_Single_Shot
* Description    : Initialize the ADC for single shot conversion.
* Return         : none
*******************************************************************************/
void LBF_ADC1_Init_Single_Shot(void)
{

RCC_OscInitTypeDef        RCC_OscInitStructure;

    // --- ADC Setup ---------------------------------------------

    //Enable HSI (required for ADC clock) 
    HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
    RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStructure.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStructure.HSIState = RCC_HSI_ON;
    HAL_RCC_OscConfig(&RCC_OscInitStructure);

    __ADC1_CLK_ENABLE();

    // Init ADC
    hAdc.Instance = ADC1;
    hAdc.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV4;  //ADC clock can be HSI/1, /2 or /4
    hAdc.Init.Resolution            = ADC_RESOLUTION12b;  // resolution can be 6, 8, 10 or 12bits
    hAdc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
    hAdc.Init.ScanConvMode          = DISABLE;  //ADC conversion on only 1 channel (set on rank 1)
    hAdc.Init.EOCSelection          = EOC_SINGLE_CONV;   // alternative: EOC_SEQ_CONV
    hAdc.Init.LowPowerAutoWait 	    = ADC_AUTOWAIT_DISABLE;
    hAdc.Init.LowPowerAutoPowerOff  = ADC_AUTOPOWEROFF_IDLE_PHASE; //off when not converting
    hAdc.Init.ChannelsBank          = ADC_CHANNELS_BANK_A; //use channels of Bank A
    hAdc.Init.ContinuousConvMode    = DISABLE;  // only 1 conversion at each conversion trigger
    hAdc.Init.NbrOfConversion       = 1;                        
    hAdc.Init.DiscontinuousConvMode = DISABLE;
    //hAdc.Init.NbrOfDiscConversion   = 1; // don't care as discontinous mode off

    hAdc.Init.ExternalTrigConv      = ADC_SOFTWARE_START;  // soft triggering of conversion 
    hAdc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;  // N/A with sw trigger
    hAdc.Init.DMAContinuousRequests = DISABLE;  // don't care in single shot mode 

    if (HAL_ADC_Init(&hAdc) != HAL_OK)
    {
      /* ADC initialization error */
      // Error Handler...
    }
 
}


/*******************************************************************************
* Function Name  : LBF_ADC1_Init_Single_Channel
* Description    : Initializes the specified channel of ADC1.
* Return         : none
*******************************************************************************/

void LBF_ADC1_Init_Single_Channel( ADC1_ChannelID_t ChannelID )
{
ADC_ChannelConfTypeDef   sConfigAdcChannel;

    hAdc.Instance = ADC1;

    sConfigAdcChannel.Channel      = ChannelID;  //is one of the ADC channels available on extension pins, or channel connected to Vbat
    sConfigAdcChannel.Rank         = ADC_REGULAR_RANK_1;  //Specified channel will be first (and only!) sampled in the sequence
    sConfigAdcChannel.SamplingTime = ADC_SAMPLETIME_16CYCLES;  //fixed here - but could range from 4 to 384 cycles
  
    if (HAL_ADC_ConfigChannel(&hAdc, &sConfigAdcChannel) != HAL_OK)
    {
      /* Channel Configuration Error */
      // Error Handler...
    }

}



/*******************************************************************************
* Function Name  : LBF_ADC1_Get_Value_Single_Shot()
* Description    : Sample the analog value present on the previously configured channel of ADC1.
* Return         : Sampled Value
*******************************************************************************/
uint32_t  LBF_ADC1_Get_Value_Single_Shot(void)
{
uint32_t    ADC_ConvertedValue;

    hAdc.Instance = ADC1;

    //Launch ADC conversion (sw triggered mode)
    HAL_ADC_Start(&hAdc);
  
    // Wait for the ADC conversion to be completed (timeout unit: ms) 
    HAL_ADC_PollForConversion(&hAdc, 10);

    // Read ADC Conversion result
    ADC_ConvertedValue = HAL_ADC_GetValue(&hAdc);

    return( ADC_ConvertedValue );
}


/*******************************************************************************
* Function Name  : LBF_ADC_Deinit
* Description    : Deinitiliazes ADC, incl. stopping ADC clocks.
* Return         : none
*******************************************************************************/
void LBF_ADC1_Deinit(void)
{

    hAdc.Instance = ADC1;
    HAL_ADC_DeInit(&hAdc);

    __ADC1_CLK_DISABLE();

// Note: HSI clock required by ADC not disabled in case it's being used by other ADC (not in L1, but possible in L4) 

}

/***************************************************************END OF FILE****/
